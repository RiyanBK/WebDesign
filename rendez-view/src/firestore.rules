rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users Collection
    match /users/{userId} {
      // Allow authenticated users to read and query users
      allow read: if request.auth != null;
      
      // Allow querying users by email
      allow list: if request.auth != null
        && request.query.limit <= 10
        && 'email' in request.query.fieldFilters
        && request.query.fieldFilters.size() == 1;
      
      // A user can create their user document upon registration
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // A user can update their own user document
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // A user can delete their own user document
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Events Collection
    match /events/{eventId} {
      // Allow reading and querying events
      allow read, list: if request.auth != null && (
        // User owns the event
        request.auth.uid == resource.data.userId ||
        // Or user is querying events and is friends with the event owner
        (request.auth != null && 
          exists(/databases/$(database)/documents/friendships/$(friendshipId(request.auth.uid, resource.data.userId))))
      );

      // Allow create if the user is authenticated and is the owner of the event
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

      // Allow update if the user is authenticated and owns the event
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;

      // Allow delete if the user is authenticated and owns the event
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Friendships Collection
    match /friendships/{friendshipId} {
      // Allow reading and querying friendships
      allow read, list: if request.auth != null && (
        // User is either sender or receiver
        request.auth.uid == resource.data.senderId || 
        request.auth.uid == resource.data.receiverId
      );

      // Allow querying all friendships for the user
      allow list: if request.auth != null && (
        ('senderId' in request.query.fieldFilters && request.query.fieldFilters.senderId == request.auth.uid) ||
        ('receiverId' in request.query.fieldFilters && request.query.fieldFilters.receiverId == request.auth.uid)
      );

      // Allow creating a friendship if authenticated
      allow create: if request.auth != null;

      // Allow updating a friendship if authenticated and involved
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.senderId || 
        request.auth.uid == resource.data.receiverId
      );

      // Allow deletion of a friendship if authenticated and involved
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.senderId || 
        request.auth.uid == resource.data.receiverId
      );
    }

    // Helper function to generate friendship document ID
    function friendshipId(uid1, uid2) {
      return uid1 < uid2 ? 
        uid1 + '_' + uid2 :
        uid2 + '_' + uid1;
    }
  }
}